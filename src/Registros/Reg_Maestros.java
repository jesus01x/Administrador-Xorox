/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Registros;

import Clases1.Conexion;
import Clases1.Validar_Campo_de_Texto;
import Clases1.fondo_imagen;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrador
 */
public class Reg_Maestros extends javax.swing.JInternalFrame {

    /**
     * Creates new form Reg_Maestros
     */
    
    //Atributos    
//Inicializo los valores x,y     
int x=0;
int y=0;
Validar_Campo_de_Texto v=new Validar_Campo_de_Texto();
//Los paso como parametro de medidas para la imagen de fondo
fondo_imagen  p=new fondo_imagen(x,y,"/Imagenes/Fondo_2.png");
boolean editando=false;
boolean exito=false;
    
    DefaultTableModel md;
    String datos[][];
    String cabecera[]={"ID Maestro","Maestro"};
    public Reg_Maestros() {
        initComponents();
        md=new DefaultTableModel(datos, cabecera);
        jTable1.setModel(md);
        txtID_Maestro.setEnabled(false);
        txtMaestro.setEnabled(false);
        Consultar_Maestros();
        Desactivar_Botones();
        Desctivar_Campos();
         x=this.getWidth();
        y=this.getHeight();
        jScrollPane2.getViewport().setOpaque(false);
      jPanel1.setOpaque(false);
       
       //Se recrea el objeto para que pinte el frame con los nuevos
       //Valores de x,y
       //Se hace de esto debido a que a partir de este constructor los valores del 
       //jframe cambian.
        p=new fondo_imagen(x,y,"/Imagenes/Fondo_2.png");
        //Se agrega el nuevo panel al jframe
        this.add(p);
        //Se empaqueta para que este se quede estatico sin modificar la posiciones de los
        //demas paneles.
        this.pack();
        v.SLETRAS_y_Espacios(txtMaestro);
        v.SNumeros(txtID_Maestro);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMaestro = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtID_Maestro = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnNuevo = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnMostrar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();

        jLabel2.setText("No. Cedula:");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Registro de Maestros");

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Maestro:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, -1, -1));
        jPanel1.add(txtMaestro, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 262, -1));

        jLabel5.setText("ID Maestro:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, -1, -1));
        jPanel1.add(txtID_Maestro, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 262, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setGridColor(new java.awt.Color(236, 233, 216));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 450, 130));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/nuevo.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.setAlignmentY(0.2F);
        btnNuevo.setBorder(null);
        btnNuevo.setBorderPainted(false);
        btnNuevo.setContentAreaFilled(false);
        btnNuevo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, -1, -1));

        btnRegistrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Guardar.png"))); // NOI18N
        btnRegistrar.setText("Guardar");
        btnRegistrar.setBorder(null);
        btnRegistrar.setBorderPainted(false);
        btnRegistrar.setContentAreaFilled(false);
        btnRegistrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 260, -1, -1));

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Eliminar.png"))); // NOI18N
        btnEliminar.setText("eliminar");
        btnEliminar.setBorder(null);
        btnEliminar.setBorderPainted(false);
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 350, -1, -1));

        btnMostrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar.png"))); // NOI18N
        btnMostrar.setText("Mostrar");
        btnMostrar.setBorder(null);
        btnMostrar.setBorderPainted(false);
        btnMostrar.setContentAreaFilled(false);
        btnMostrar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 260, -1, -1));

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/salir.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setBorder(null);
        btnSalir.setBorderPainted(false);
        btnSalir.setContentAreaFilled(false);
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 350, -1, -1));

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 100, 60));

        btnEditar.setText("Editar");
        btnEditar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 80, -1));

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int Comprobar_ID_Maestro(int d)
    {
        int x=0;
        try
        {
        String consultar="SELECT * FROM xorox.maestros where ID_MAESTRO="+d+";";
        Conexion miconexion=new Conexion();
        Connection conn= miconexion.getConnection();
        Statement pst2=conn.createStatement();
        ResultSet rs=pst2.executeQuery(consultar);
        Object datos[]=new Object[2];
        while(rs.next())
        {
         x=rs.getInt("ID_MAESTRO");
        }
        conn.close();
        btnEliminar.setEnabled(true);
        btnEditar.setEnabled(true);
        btnCancelar.setEnabled(true);
        }catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());                    
        }
        return x;
    }
    
    public void Consultas()
    {
        limpiartabla(md);
        try
        {
        String consultar="SELECT * FROM xorox.maestros;";
        Conexion miconexion=new Conexion();
        Connection conn= miconexion.getConnection();
        Statement pst2=conn.createStatement();
        ResultSet rs=pst2.executeQuery(consultar);
        Object datos[]=new Object[2];
        while(rs.next())
        {
         datos[0]=rs.getString("ID_MAESTRO");
         datos[1]=rs.getString("Maestro");
         md.addRow(datos);
        }
        conn.close();
        btnEliminar.setEnabled(true);
        btnEditar.setEnabled(true);
        btnCancelar.setEnabled(true);
        }catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());                    
        }
    }
    
    public void Actualizar(int d)
    {
        try
      {
   
        Conexion miconexion=new Conexion();
        Connection conn= miconexion.getConnection();
        //Segun la columna que haya seleccionado sera el valor que se modique
        int idMaestro=Integer.parseInt(txtID_Maestro.getText());
        String Maestro=txtMaestro.getText();
        String actualizar="UPDATE `xorox`.`maestros` SET `ID_MAESTRO`=?, `Maestro`=? WHERE `ID_MAESTRO`=?;";
        PreparedStatement pst=conn.prepareStatement(actualizar);
        pst.setInt(1, idMaestro);
        pst.setString(2, Maestro);
        pst.setInt(3, d);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Cambio realizado con exito");
        conn.close();
      }catch(SQLException e)
      {
        JOptionPane.showMessageDialog(null, e.getMessage());
      }  
    }
            
    
    public boolean Insertar()
    {
        
       String registrar="INSERT INTO `xorox`.`maestros` (`ID_MAESTRO`, `Maestro`) VALUES (?, ?);";
       int idMaestro=Integer.parseInt(txtID_Maestro.getText());
       String Maestro=txtMaestro.getText();
       boolean exito=false;
         try
            {
                
                Conexion miconexion=new Conexion();
                Connection conn= miconexion.getConnection();
                PreparedStatement pst=conn.prepareStatement(registrar);
                Object info[]={idMaestro,Maestro};
                pst.setInt(1, idMaestro);        
                pst.setString(2, Maestro);
                pst.executeUpdate();
                md.addRow(info);
                limpiar();
                JOptionPane.showMessageDialog(null, "Registro Exitoso");
                conn.close();
                btnNuevo.setEnabled(true);
                btnRegistrar.setEnabled(false);
                btnCancelar.setEnabled(false);
                exito=true;
            }catch(SQLException e)
            {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
         return exito;
    }
    
    public boolean Eliminar()
    {
              btnEliminar.setEnabled(false);
              boolean exito=false;
            try
        {
        Conexion miconexion=new Conexion();
        Connection conn= miconexion.getConnection();
        //Obtiene la fila a eliminar
        int idMaestro=Integer.parseInt(txtID_Maestro.getText());      
        String eliminar="DELETE FROM `xorox`.`maestros` WHERE `ID_MAESTRO`=?;";
        PreparedStatement pst=conn.prepareStatement(eliminar);  
        pst.setInt(1, idMaestro);
        pst.execute();
        JOptionPane.showMessageDialog(null, "Registro Eliminado");
        conn.close();  
        btnCancelar.setEnabled(false);
        exito=true;
        }catch(SQLException e)
        {
           JOptionPane.showMessageDialog(null, e.getMessage());
        }
            return exito;
    }
    
       public void limpiartabla(DefaultTableModel md)
    {
       //Recibo el modelo de la tabla para limpiarlo de manera correcta 
  for (int i = 0; i < jTable1.getRowCount(); i++) {
           md.removeRow(i);
           i-=1;
       }
    }
       
       //Comprueba si el maestro se encuentra en la base de datos
       public Object[] Comprobar_Maestro(int ID_Maestro)
       {
           Object datos1[]=new Object[2];
                try
        {
            limpiartabla(md);
        String consultar="SELECT * FROM xorox.maestros where ID_MAESTRO="+ID_Maestro+";";
        Conexion miconexion=new Conexion();
        Connection conn= miconexion.getConnection();
        Statement pst2=conn.createStatement();
        ResultSet rs=pst2.executeQuery(consultar);
       
        while(rs.next())
        {
          datos1[0]=rs.getInt("ID_MAESTRO");
           datos1[1]=rs.getString("Maestro");
        }
        conn.close();
        }catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());                    
        }
            return datos1; 
       }
       
       public void Activar_Campos()
       {
           txtID_Maestro.setEnabled(true);
           txtMaestro.setEnabled(true);
       }
       
         public void Desctivar_Campos()
       {
           txtID_Maestro.setEnabled(false);
           txtMaestro.setEnabled(false);
       }
       
       public void Activar_Botones()
       {
        btnCancelar.setEnabled(true);
        btnEditar.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnMostrar.setEnabled(true);
        btnRegistrar.setEnabled(true);    
       }
                          
       public void Desactivar_Botones()
       {
        btnCancelar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnMostrar.setEnabled(false);
        btnRegistrar.setEnabled(false);   
       }
       
       public void limpiar_Campos()
       {
          txtID_Maestro.setText("");
          txtMaestro.setText(""); 
       }
    
    
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        //Activa los campos y botones disponibles
        Activar_Campos();
        Activar_Botones();
        //Desactiva el boton Nuevo
        btnNuevo.setEnabled(false);
        editando=false;
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        exito=false;
        //Confirma que no hayan campos vacios
        if(txtID_Maestro.getText().equals("") || txtMaestro.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "No se permiten campos vacios");
        }else
        {
            //confirma si se encuentra en modo de edicion
            if(editando==false)
            {
                exito=Insertar();//Confirma que se realizo la Inserccion correctamente
                if(exito)
                {
                    //Desactiva los campos y botones
                    Desactivar_Botones();
                    Desctivar_Campos();
                    //Activa el boton nuevo
                    btnNuevo.setEnabled(true);
                    //Limpia la informacion que se encuentra en los campos
                    limpiar_Campos();
                }
            }
            else
            {
                //Activa los botones de Editar y Canclear
                btnEditar.setEnabled(true);
                btnCancelar.setEnabled(false);
                //Variable auxiliar para el ID del Maestro
                int id_m=Integer.parseInt(txtID_Maestro.getText());
                Object datos2[]=new Object[2];
                datos2=Comprobar_Maestro(id_m);//Regresa el Id del maestro consultado
                //Si esta se encuentra en la base de datos
                int ID_Maestro=Integer.parseInt(""+datos2[0]);
                if(ID_Maestro!=0)
                {
                    //Actuliza un registro en especifico de acuerdo al parametro que le paso
                    Actualizar(ID_Maestro);
                    //Parche por si alguna columna y fila estan seleccionadas
                    if(jTable1.getSelectedRow()>=0 ||jTable1.getSelectedColumn()>=0 )
                    {

                        //Esto permite actualizar correctamente la informacion en caso que este
                        //seleccionada alguna columna o fila
                        //Deselecciona la fila
                        md.setRowCount(-1);
                        //Deselecciona la columna
                        md.setColumnCount(-1);
                    }
                    Consultas();
                    //Desactiva los campos y botones
                    Desactivar_Botones();
                    Desactivar_Botones();
                    //Limpia la informacion que se encuentra en los campos
                    limpiar_Campos();
                    //Activa el boton nuevo
                    btnNuevo.setEnabled(true);
                }
                //Si no se encuentra mandara el siguiente mensaje
                else
                {
                    JOptionPane.showMessageDialog(null, "La Matricula escrita no coincide con la base de datos");
                }
            }

        }

    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        exito=Eliminar();
        if(exito==true)
        {
            Desactivar_Botones();
            Desctivar_Campos();
            limpiar_Campos();
            btnNuevo.setEnabled(true);
            Consultas();
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        //Desactiva todos los campos
//        Desctivar_Campos();
        //Limpia todos los campos
        limpiar_Campos();
//        txtID_Maestro.setEnabled(true);
        //Muestra la informacion en la tabla.
        Consultas();
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        //Desactiva el boton de Cancelar
        btnCancelar.setEnabled(false);
        //Desactiva los campos y los botones
        Desactivar_Botones();
        Desctivar_Campos();
        limpiar_Campos();
        //Activa el Boton de Nuevo
        btnNuevo.setEnabled(true);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:

        //Comprueba que no existan campos vacios
        if(txtID_Maestro.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "No ha ingresado el ID del Maestro");
        }
        else
        {
           int idm=Integer.parseInt(txtID_Maestro.getText());
            Object var[]=new Object[2];
            //Guarda en una arreglo de tipo cadena los valores obtenidos de la base de datos
            var=Comprobar_Maestro(idm);
            //Comprueba si no recibo informacion vacia o nula
             JOptionPane.showMessageDialog(null, var[0]);
             JOptionPane.showMessageDialog(null, var[1]);
            int id_Maestro=Integer.parseInt(""+var[0]);
            JOptionPane.showMessageDialog(null, id_Maestro);
            if(id_Maestro==0)
            {
                JOptionPane.showMessageDialog(null,"El No. de Matricula es Incorrecto");
            }
            else
            {
                //Pasa la informacion del arreglo de String al los campos de texto
                txtID_Maestro.setText(""+var[0]);
                txtMaestro.setText(""+var[1]);
                btnEditar.setEnabled(false);
                //Cambia al modo edicion.
                editando=true;
                //Activa el boton para Guardar los cammbios realizados
                btnRegistrar.setEnabled(true);
            }
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    public void Consultar_Maestros()
    {
         try
        {
        String consultar="SELECT * FROM xorox.maestros;";
        Conexion miconexion=new Conexion();
        Connection conn= miconexion.getConnection();
        Statement pst2=conn.createStatement();
        ResultSet rs=pst2.executeQuery(consultar);
        Object info[]=new Object[2];
        while(rs.next())
        {
           info[0]=rs.getInt("ID_MAESTRO");
           info[1]=rs.getString("Maestro");
           md.addRow(info);
        }
        conn.close();
        }catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());                    
        }
    }
    
    public void limpiar()
    {
        txtMaestro.setText("");     
        txtID_Maestro.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField txtID_Maestro;
    private javax.swing.JTextField txtMaestro;
    // End of variables declaration//GEN-END:variables
}
